from fastapi import FastAPI, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import subprocess, os, shutil, uuid, json, threading

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://sanskar0104.github.io"],  # Replace with your frontend domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def run_aider_with_prompt_detection(cmd, cwd):
    proc = subprocess.Popen(
        cmd,
        cwd=cwd,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        universal_newlines=True
    )

    def monitor_stdout():
        for line in proc.stdout:
            print("[AIDER] ‚Üí", line.strip())
            try:
                if "Run shell command?" in line:
                    proc.stdin.write("n\n")
                    proc.stdin.flush()
                    print("üîÅ Auto-replied 'n' to run-shell prompt")
                elif "?" in line and "(Y)es" in line and proc.poll() is None:
                    proc.stdin.write("y\n")
                    proc.stdin.flush()
                    print("‚úÖ Auto-replied 'y' to non-shell prompt")
            except Exception as e:
                print("‚ùå Failed to respond:", e)

    thread = threading.Thread(target=monitor_stdout)
    thread.start()
    proc.wait()
    thread.join()

    if proc.returncode != 0:
        raise subprocess.CalledProcessError(proc.returncode, cmd)

    return proc

@app.post("/aider-generate/")
async def aider_generate(prompt: str = Form(...), file: UploadFile = None):
    run_id = str(uuid.uuid4())
    run_dir = f"/tmp/aider_{run_id}"
    os.makedirs(run_dir, exist_ok=True)

    try:
        if file:
            filename = os.path.join(run_dir, file.filename)
            with open(filename, "wb") as f:
                f.write(await file.read())

            run_aider_with_prompt_detection(
                ["aider", file.filename, "--message", prompt],
                cwd=run_dir
            )

            with open(filename, "r") as f:
                edited_code = f.read()
            return JSONResponse({"generated_code": edited_code})

        else:
            filepath = os.path.join(run_dir, "experiment.py")
            with open(filepath, "w") as f:
                f.write("# Empty file generated by Aider\n")

            run_aider_with_prompt_detection(
                ["aider", "experiment.py", "--message", prompt],
                cwd=run_dir
            )

            with open(filepath, "r") as f:
                generated_code = f.read()
            return JSONResponse({"generated_code": generated_code})

    except subprocess.CalledProcessError as e:
        return JSONResponse({"error": str(e)}, status_code=500)
    finally:
        shutil.rmtree(run_dir)

@app.post("/run-code/")
async def run_code(payload: dict):
    code = payload.get("code", "")
    run_id = str(uuid.uuid4())
    run_dir = f"/tmp/run_{run_id}"
    os.makedirs(run_dir, exist_ok=True)

    script_path = os.path.join(run_dir, "experiment.py")
    with open(script_path, "w") as f:
        f.write(code)

    try:
        result = subprocess.run(["python", script_path], capture_output=True, text=True, timeout=15, cwd=run_dir)
        json_file = next((f for f in os.listdir(run_dir) if f.endswith(".json")), None)

        if result.returncode != 0:
            return {"error": "Execution failed", "stderr": result.stderr, "stdout": result.stdout}

        if json_file:
            with open(os.path.join(run_dir, json_file)) as jf:
                return {"result": json.load(jf), "stdout": result.stdout}
        else:
            return {"error": "No JSON file created."}

    except subprocess.TimeoutExpired:
        return {"error": "Script timed out"}
    except Exception as e:
        return {"error": str(e)}
    finally:
        shutil.rmtree(run_dir)
